---
layout: entry
title: "알고리즘 코딩"
author: 이제언
date: 2017-08-08 05:41 +0900
tags: 프로그래밍
comments: true
--- 

# About "**Space Triangle**"



```c++  
#include <iostream>
using namespace std;
const int TESTCASE = 50;

float mySqrt(float num) {
  if (num >= 0) {
    float x = num;
    int i;
    for (i = 0; i < 20; i++) {
      x = (((x * x) + num) / (2 * x));
    }
    return x;
  }
}

float getDistance(float px, float py, float pz, float pX, float pY, float pZ) {
  float dx = (px - pX);
  float dy = (py - pY);
  float dz = (pz - pZ);

  return mySqrt(dx*dx + dy*dy + dz*dz);
}

int L[3][6];
int lineMinPoint[3][6];

// Condition 1) 어떤 선분도 교차하지 않는다.
// Condition 2) 어떤 선분도 평행하지 않다.
// Condition 3) 어떤 선분도 동일한 평면에 놓여있지 않다.
// Condition 4) 3개 선분의 길이는 서로 다르며 그 차이는 1 이상이다.

int main() {
  int t, i, j;
  for (t = 1; t <= TESTCASE; t++) {
    for (i = 0; i < 3; ++i) {
      for (j = 0; j < 6; j++) {
        cin >> L[i][j];
      }
    } // end of input

    // 1. 두 선의 가장 짧은 거리를 갖는 점을 찾는다.
    // 1 - a) 양 끝점의 거리 중 가장 짧은 것을 먼저 찾는다.
    float minEndtoEnd = getDistance(L[0][0], L[0][1], L[0][2], L[1][0], L[1][1], L[1][2]);
    float tempDist = getDistance(L[0][0], L[0][1], L[0][2], L[1][3], L[1][4], L[1][5]);
    if (minEndtoEnd < tempDist) {
      minEndtoEnd = tempDist;
    }
    tempDist = getDistance(L[0][3], L[0][4], L[0][5], L[1][0], L[1][1], L[1][2]);
    if (minEndtoEnd < tempDist) {
      minEndtoEnd = tempDist;
    }
    tempDist = getDistance(L[0][3], L[0][4], L[0][5], L[1][3], L[1][4], L[1][5]);
    if (minEndtoEnd < tempDist) {
      minEndtoEnd = tempDist;
    }


  }
}  
```

