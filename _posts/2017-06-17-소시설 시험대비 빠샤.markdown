---
layout: entry
title: "소시설 시험대비 빠샤"
author: 이제언
date: 2017-06-17 00:19 +0900
tags: 소시설, 기말고사
comments: true
---
* table of contents
{:toc}

# 단위테스트

## JUnit 이용 Test  

**Assertion 유형**  
assertEquals(a, b);  
assertNull(object);  
assertNotNull(object);  
assertSame(a, b); // 같은 객체 참조여부  
assertNotSame(a, b);  
assertTrue(condition);  

**JUnit test 예시**  

```java  

public class MathTest {
    private Mymath testMath;
	
	@Test
	public void testConstructor() {
		testMath = new Mymath();
		assertTrue(testMath.getUseCount() == 0);
	}

	@Test
	public void testAddition() {
		assertEquals(5, testMath.addition(2, 3));
	}

	@Test
	public void testMultiply() {
		assertEquals(6, testMath.multiply(2, 3));
	}
}

```  

**경계값**을 고려하면서 test하자!  

## Mock Test  

**유용성**  
아직 완전히 만들어지지 않은 개체에 대한 테스트가 가능하다.

---  
---  

# Testing

## BlackBox Testing

### State Coverage  

![State Coverage Example](https://zemalee.github.io/images/Software_Engineering/01_State_Coverage.png)

### Transition Coverage

![Transition Coverage Example](https://zemalee.github.io/images/Software_Engineering/02_Transition_Coverage.png)

---  
---  

# Refactoring  

## Overview

Refactoring이란 외부에서 본 프로그램의 동작은 변하지 않고, 프로그램 내부의 구조를 개선하는 것이다.  
**"외부에서 본 동작은 변하지 않고** -> 최소한의 단위테스트는 필요.  

**Bad Smell 측정**  
* CC  
	Number of decisions + 1
	if, else, for loop가 많을 때 증가  
* Nesting Depth  
	Number of Structuring levels  
	중첩된 if의 깊이  
* NPath  
	Number of (static) Execution Paths  
	갈 수 있는 경로의 갯수  
* Coupling  
	Degree of interdependence beteween two modules  
* Cohesion  
	strength of functional relatedness of elements within a module  
* LOC  
	Lines of Code  

**SOLID 원칙**  

| SOLID |              해 설              |
|:-----:|:-------------------------------:|
|   S   | Single Responsibility Principle |
|   O   |      Open Closed Principle      |
|   L   |  Liskov Substitution Principle  |
|   I   | Interface Segregation Principle |
|   D   |  Dependency Inversion Principle |

응집도 : S  
규모 : S  
복잡도 : D  
결합도 : L, I, D  

