---
layout: entry
title: "면접s"
author: 이제언
date: 2017-10-27 19:00 +0900
tags: 채용, 공채
comments: true
--- 
* table of contents
{:toc}

# C++  
																																																																																																												

# Call-back 함수란?

호출될 함수를 알려주어 다른 프로그램 또는 다른 모듈에서 함수를 호출하게 하는 방법.
일반적으로 운영 체계(OS)가 호출할 애플리케이션의 함수를 지정해 특정한 사건 또는 메시지가 발생했을 때 호출되도록 지정할 수 있다. 이런 함수를 콜백 함수라고 한다.

![콜백함수](https://zemalee.github.io/images/201702/callback.png)

# Entity - Relation - Modeling (ERD / ERM)

|       |  Entity  |  Relation  |  Attribute |
|:-----:|:--------:|:----------:|:----------:|
| 형식  |  네  모   | 선 또는 다이아 | 동그라미 |

# 객체지향 프로그램의 개념

* Objects  
  특정 목적을 이루기 위해 구성되어지는 객체!  
  데이터, 행위, IDentity의 집합.    
  
* Class  
  객체를 담기 위한 통.  
  속성 정의, 메소드 구현.

* Encapsulation  
  객체를 Interface와 Implement로 나눈다.  
  Private을 보장하고 사용법만 알면 되는 방법?  
  자동차 몬다고 생각하면 엔진이 몇바퀴돌고 알필요 ㄴㄴ

* Inheritance  
  Sub-class를 생성하여 Super-class를 이용하는 방법.  
  코드 재활용. 간소화된 클래스 구조.  
  클래스 기능 테스트에 대한 생산성, 정확성 증가  
  클래스 수정/추가에 대한 유연성, 확장성.

* Polymorphism  
  상위클래스 타입 변수에 하위클래스가 참조할 수 있다.  
  여러 타입의 객체를 하나의 타입으로 관리할 수 있다.  
  확장성 업! 결합도 다운!

# OSI 7계층

## 전반적 설명

|     레벨    | 계층 | 기능 |
|:-----------:|:----|:----|
| Application(응용계층) | DHCP, DNS, FTP, HTTP 제공 | 사용자가 네트워크에 접근할 수 있도록 함. UI, 우편, DB관리 등 서비스를 제공. 텔넷, HTTP, SMTP, FTP 등이 예시 |
| Presentation(표현계층) | JPEG, MPEG, SMB, AFP.. 이해할 수 있는 포맷으로 변환 | 입출력 데이터를 하나의 표현 형태로 변환. 제어코드나 문자 및 그래픽등의 확장자 를 생각하면 쉽다 |
| Session(전송계층) | TCP, UDP, ARP, 게이트웨이 | P-to-P 제어 및 에러관리. 패킷전송의 유효성과 실패 패킷의 재전송 등 통신의 신뢰성을 보장. 머리에는 Segment가 포함됨. |
| Network | IP, ICMP, IGMP. 라우터 | Packet을 전달할 책임을 갖는다. 각 패킷이 성공적 효과적으로 전달되도록 함. IP가 대표적 |
| Data Link | MAC, PPP, 브리지, 스위치 | 오류 없이 Frame(비트들)을 전달하는 역할. MAC주소를 이용해 정확한 장치로 정보를 전달함. Network계층에서 정보를 받아와 주소와 제어정보를 추가함 |
| Physical(물리계층) | 이더넷 등. 허브, 리피터 | 물리적 매체를 통해 Bit를 전송하기 위해 요구되는 기능을 조정. 케이블, 연결장치 등. 다른 두 노드를 물리적으로 연결시켜주는 신호방식을 다룸 |

## 계층별 대표 프로토콜

| 계층 | 프로토콜 예시 |
|:-----:|:-----|
| 7. Applacation | HTTP, SMTP, SNMP, FTP, Telnet, SSH, Scp, NFS, RTSP |
| 6. Presentation | JPEG, MPEG, XDR, ANS.1, SMB, AFP |
| 5. Session | TLS, SSH, RPC |
| 4. Transport | TCP, UDP, RTP, SCTP, PSX |
| 3. Network | IP, ICMP, IGMP, CLNP, ARP, RARP, BGP, OSPF, RIP, IPX, DDP |
| 2. DataLink | Ethernet, Toekn-Ring, PPP, HDLC, ISDN, ATM, 무선랜 |
| 1. Physical | 전선, 전파, 광섬유, 케이블, 모뎀 |

## Layer별 설명

### 1. Physical Layer

전기적, 기계적 특성을 이용해 통신케이블로 전기적 신호를 전송.  
Bit(1, 0)의 인코딩 전압 등을 정의한 계층이다.  
데이터 전달만을 책임지고, 알고리즘이나 오류제어의 기능이 없다.  
(ex. 케이블, 리피터, 허브)

### 2. Data Link Layer

물리적 연결을 통해 인접한 두 장치간의 신뢰성 있는 정보 전송을 담당  
주소와 제어정보를 갖고 있으며, 정보 오류 및 흐름을 관리한다.  
(ex. LLC, CSMA/CD, Token-Ring)

### 3. Network Layer - "패킷"

중계 노드를 통해 전송하는 경우, 어떻게 중계할지 규정한다.  
Packet을 단위로, 목적지까지의 경로를 설정한다.  
목적지까지 안전하고 빠르게 전달하도록 한다.( = 라우팅 )  
(ex. IP의 Addressing, Fragmentation, Routing. 라우터, L3 스위치)  

### 4. Transport Layer - "세그먼트"

End-to-End간 신뢰성있고 정확한 데이터 전송을 담당한다.  
각 끝간의 에러복구와 흐름제어를 담당한다.  
(ex. TCP, UDP)  

### 5. Session Layer

통신장치 간 상호작용 및 동기화를 제공한다.  
데이터 교환과 에러발생시의 복구를 담당. 즉 논리적 연결을 담당한다.  
(ex. Port)

### 6. Presentation Layer

데이터 표현에 차이가 있는 응용처리에서의 제어 구조를 제공한다.  
확장자라고 생각하면 가장 간단하다.  
전송하는 데이터의 Encoding, Decoding, 암호화, 코드변환 등  
(ex. ASCII, JPEG, MPEG)

### 7. Application Layer

사용자의 인터페이스 역할을 수행한다.  
응용 프로세스간의 정보 교환.  
(ex. 전자메일, 인터넷, 동영상 플레이어 등 App)

# DHCP(Dynamic Host Configuration Protocol)

TCP/IP 통신을 실행하기 위해 필요한 설정 정보를 자동적으로 할당, 관리하기 위한 통신 규약  
인터넷에 접속시 동적으로 IP 주소를 할당해주는 프로토콜

**할당 과정**  

1. PC에서 브로드캐스트로 DHCP 서버를 찾기위한 패킷을 보낸다  
	PC 단말기의 MAC 주소를 실어 보낸다.

2. DHCP서버에서 브로드캐스트(또는 Unicast) PC에 패킷을 보낸다.  
	단말MAC, 임대IP, Default Gateway IP, DNS, 임대기간 등을 실어 보낸다.  
	여러 DHCP서버가 Offer를 보낼 수 있기 때문에 자신의 IP를 실어 보낸다.

3. PC에서 DHCP서버로 브로드캐스트를 통해 연결함을 알린다.  
	MAC주소, 요청IP등을 실어 "이 IP 쓸께요"를 알림

4. DHCP의 ACK를 PC에게 보냄  
	네트워크 정보에 대해 PC에 보내준다.  
	MAC/IP/SubnetMask/Router/DNS/IPLease/Server....

# DNS(Domain Name Server/System)

1. www.naver.com을 입력합니다. 본인 DNS(Local DNS 서버)에 "www.naver.com"이라는 hostname의 IP주소를 묻는다.  
2. 있으면 종료.  
3. 다른 DNS 서버들과 통신(DNS 메시지)을 시작. Root DNS 서버에게 "www.naver.com에 대한 IP 주소"를 요청.  
4. Root DNS가 "~~~.com"에 대한 DNS 주소를 줌.  
5. COM DNS로 "www.naver.com"을 물어봄.  
6. COM DNS는 "naver.com"까지는 알겠는데~ 하고 NAVER.com DNS 주소를 줌  
7. NAVER.com DNS로 "www.naver.com" IP를 물어봄  
8. 매칭되서, 그 주소 이거야 하고 "000.000.000.000"을 던져줌.
 
Local DNS 서버가 여러 DNS 서버를 차례대로 (Root DNS 서버 -> com DNS 서버 -> naver.com DNS 서버) 물어봐서 그 답을 찾는 과정을 **Recursive Query**라고 부릅니다.

