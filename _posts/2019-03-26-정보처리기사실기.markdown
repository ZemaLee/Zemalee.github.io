---
layout: entry
title: "정보처리기사실기"
author: 이제언
date: 2019-03-26 12:00 +0900
tags: 채용, 자격증, 포트폴리오
comments: true
--- 
* table of contents
{:toc}

# 객체지향 기법 개요

* 객체지향 : 현실 세계의 개체를 기계의 부품처럼 하나의 객체로 만들어, 소프트웨어를 개발할 때 객체들을 조립하여 작성할 수 있도록 하는 기법이다.  
* 구조적 기법의 문제점을 해결할 방법으로 채택됨.(구조적기법의 문제점 : 여러 함수가 모든 데이터를 조작 가능)

## 객체, 클래스, 메시지

* 객체(Object)  
  데이터와 데이터를 처리하는 함수를 묶어놓은 하나의 소프트웨어 모듈.

* 클래스(Class)  
  공통된 속성과 연산을 갖는 객체의 집합.  
  각 객체가 갖는 속성과 연산을 정의하고 있는 틀  

* 메시지(Message)  
  객체간 상호작용에 사용되는 수단.  
  객체에게 어떤 행위를 하도록 지시하는 명령 또는 요구사항.  
  `객체(수신자) / 수행할 메소드 이름 / 필요한 인자`를 구성요소로 갖는다.

## 객체지향 기법의 기본 원칙  

* 캡슐화(Encapsulation)  
```  
데이터와 데이터를 처리하는 함수를 하나로 묶는 것을 의미한다.  
묶는 단위가 작을수록, 프로그램 변경 발생시 오류의 파급 효과가 적다.  
캡슐화를 잘 하게 되면, 재사용성이 높아진다.  
인터페이스가 단순해지고, 객체 간의 결합도가 낮아진다.  
```

* 정보 은닉(Information Hiding)  
```  
타 객체에게 자신의 정보를 숨기고, 연산만을 이용한 접근을 허용하는 것.  
c++ class private 변수를 생각하면 쉽고, getName(); setName(); 등과 같이 동작시킨다.  
```

* 추상화(Abstaction)  
```  
불필요한 부분 생략, 가장 중요한 것에 초점을 두는 것. (모델화)  
역사책, 국어책, 수학책 --> 책 ! 으로 묶는 행위  
```

* 상속성(Inheritance)  
```  
super() 클래스에 정의된 속성과 연산을 이어받는 것.  
하위클래스는 같은 속성과 연산을 재정의하지 않아도 됨.  
```

* 다형성(Polymorphism)  
```  
객체가 연산을 수행하게 될 때, 하나의 메세지에 대해 각 클래스가 가지고 있는 고유한 방법으로 응답하는 것  
void move() {  
	if( 차 ) moveWheel()  
	if( 게임 ) movePixel()  
	...  
}  
```

## 객체지향 기법의 생명주기  

`계획 및 분석` - `설계` - `구현` - `테스트 및 검증`

# 진법 변환

10진수 <----> 2^n진수 변환 방법

```  
1) 10진수 수를 2진화 시킨다.  
2) 2진수를 n개씩 묶는다.  
3) 갯수가 모자란 경우, 앞에 0을 붙여 맞춘다.  
4) 묶은 숫자를 한 자리씩 적는다.  
```


ex) 10진수 555 표현

**555 = 1000101011(2)**

```
**4진수**로 555 = 20223  
10 00 10 10 11  
 2  0  2  2  3  
```

```
**8진수**로 555 = 1053  
001 000 101 011  
  1   0   5   3  
```

```
**16진수**로 555 = 22b  
0010 0010 1011  
   2    2   11  
```
