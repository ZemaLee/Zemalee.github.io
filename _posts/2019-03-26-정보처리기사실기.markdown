---
layout: entry
title: "정보처리기사실기"
author: 이제언
date: 2019-03-26 12:00 +0900
tags: 채용, 자격증, 포트폴리오
comments: true
--- 
* table of contents
{:toc}

# 데이터베이스

: 특정 조직의 업무를 수행하는 데 필요한 상호 관련된 데이터들의 모임

* 통합 데이터  
: 검색의 효율성을 위해 중복이 최소화된 데이터의 모임

* 저장 데이터  
: 컴퓨터가 접근 가능한 저장 매체에 저장된 데이터

* 운영 데이터  
: 조직의 목적을 위해 존재 가치가 확실하고 반드시 필요한 데이터

* 공유 데이터  
: 여러 응용프로그램들이 공동으로 사용하는 데이터

## 데이터베이스의 특징

* 실시간 접근성  
: 사용자의 질의에 대해 즉시 처리하여 응답하는 특징

* 계속적인 진화  
: 삽입, 삭제, 갱신을 통해 항상 최근의 정확한 데이터를 동적으로 유지하는 특징  

* 동시 공유  
여러 사용자가 동시에 원하는 데이터를 공용할 수 있는 특징

* 내용에 의한 참조  
튜플의 주소나 위치에 의해서가 아니라 사용자가 요구하는 데이터내용에 따라 참조하는 특징

* 데이터의 논리적, 물리적 독립성
1) 논리적 독립성 : 응용 프로그램과 데이터베이스를 독립시킴으로써 데이터의 논리적 구조를 변경시키더라도 응용 프로그램은 변경되지 않는 특징  
2) 물리적 독립성 : 응용프로그램과 보조기억장치와 같은 물리적 장치를 독립시킴으로써, 관리 시스템의 성능 향상을 위해 디스크를 추가하더라도, 응용 프로그램에는 영향을 주지않고 데이터의 물리적 구조만 변경될 수 있음.

## 데이터베이스 언어

* 데이터 정의어(DDL)  
: DB 구조, 형식, 접근방식 등 DB 구축 및 변경 목적으로 사용한 언어.  
: DDL 컴파일러가 컴파일 한 후 데이터 사전에 저장한다.  
: 논리적 구조적 정의 및 변경  
: 스키마에 사용되는 제약조건 정의  
: 데이터의 물리적 순서를 규정한다.

* 데이터 조작어(DML)  
: 데이터 처리를 위해 응용프로그램과 DBMS 간의 인터페이스를 위한 언어.  
: 데이터 처리를 위한 연산의 집합으로, 검색/삽입/삭제/갱신 연상 등이 있다.  
: DML의 형태에는 크게 [절차적 데이터 조작어 / 비절차적 데이터 조작어]로 나눌 수 있다.  

**절차적 데이터 조작어**  
: 사용자가 어떤 데이터를 원하며 **어떻게** 구하는지를 명시하는 언어.  
**비절차적 데이터 조작어**  
: 사용자가 어떤 데이터가 필요한지만 명시하는 언어.

* 데이터 제어어(DCL)  
: 보안, 권한제어, 무결성, 회복, 병행제어를 위한 언어  
: DCL의 기능  
    **(1) 데이터 보안** : 권한이 없는 접근으로부터 데이터베이스를 보호한다.  
    **(2) 데이터 무결성** : 의미적인 측면에서 데이터가 정확하고 완전함을 의미한다. 무결성 제약 조건을 정의한 경우, DMBS는 삽입/삭제/갱신시 제약조건을 자동으로 검사한다.  
    **(3) 데이터 회복** : 시스템 오류 등으로부터 데이터베이스를 회복한다.  
    **(4) 병행 제어** : 여러 사용자가 동시에 DB를 공유할 수 있도록 한다.

# 객체지향 기법 개요

* 객체지향 : 현실 세계의 개체를 기계의 부품처럼 하나의 객체로 만들어, 소프트웨어를 개발할 때 객체들을 조립하여 작성할 수 있도록 하는 기법이다.  
* 구조적 기법의 문제점을 해결할 방법으로 채택됨.(구조적기법의 문제점 : 여러 함수가 모든 데이터를 조작 가능)

## 객체, 클래스, 메시지

* 객체(Object)  
  데이터와 데이터를 처리하는 함수를 묶어놓은 하나의 소프트웨어 모듈.

* 클래스(Class)  
  공통된 속성과 연산을 갖는 객체의 집합.  
  각 객체가 갖는 속성과 연산을 정의하고 있는 틀  

* 메시지(Message)  
  객체간 상호작용에 사용되는 수단.  
  객체에게 어떤 행위를 하도록 지시하는 명령 또는 요구사항.  
  `객체(수신자) / 수행할 메소드 이름 / 필요한 인자`를 구성요소로 갖는다.

## 객체지향 기법의 기본 원칙  

* 캡슐화(Encapsulation)  
```  
데이터와 데이터를 처리하는 함수를 하나로 묶는 것을 의미한다.  
묶는 단위가 작을수록, 프로그램 변경 발생시 오류의 파급 효과가 적다.  
캡슐화를 잘 하게 되면, 재사용성이 높아진다.  
인터페이스가 단순해지고, 객체 간의 결합도가 낮아진다.  
```

* 정보 은닉(Information Hiding)  
```  
타 객체에게 자신의 정보를 숨기고, 연산만을 이용한 접근을 허용하는 것.  
c++ class private 변수를 생각하면 쉽고, getName(); setName(); 등과 같이 동작시킨다.  
```

* 추상화(Abstaction)  
```  
불필요한 부분 생략, 가장 중요한 것에 초점을 두는 것. (모델화)  
역사책, 국어책, 수학책 --> 책 ! 으로 묶는 행위  
```

* 상속성(Inheritance)  
```  
super() 클래스에 정의된 속성과 연산을 이어받는 것.  
하위클래스는 같은 속성과 연산을 재정의하지 않아도 됨.  
```

* 다형성(Polymorphism)  
```  
객체가 연산을 수행하게 될 때, 하나의 메세지에 대해 각 클래스가 가지고 있는 고유한 방법으로 응답하는 것  
void move() {  
	if( 차 ) moveWheel()  
	if( 게임 ) movePixel()  
	...  
}  
```

## 객체지향 기법의 생명주기  

`계획 및 분석` - `설계` - `구현` - `테스트 및 검증`

# 진법 변환

10진수 <----> 2^n진수 변환 방법

```  
1) 10진수 수를 2진화 시킨다.  
2) 2진수를 n개씩 묶는다.  
3) 갯수가 모자란 경우, 앞에 0을 붙여 맞춘다.  
4) 묶은 숫자를 한 자리씩 적는다.  
```


ex) 10진수 555 표현

**555 = 1000101011(2)**

```
**4진수**로 555 = 20223  
10 00 10 10 11  
 2  0  2  2  3  
```

```
**8진수**로 555 = 1053  
001 000 101 011  
  1   0   5   3  
```

```
**16진수**로 555 = 22b  
0010 0010 1011  
   2    2   11  
```
